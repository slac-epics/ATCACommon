# 
# ATCACommon EPICS module
#
This module brings FPGA registers that are common to all ATCA-based IOC
applications:
    - Crossbar control
    - JESD configurations
    - Scope configuration

***************************************************************
* 1) Building the IOC application with the ATCACommon module *
***************************************************************

1.1) configure/RELEASE
ATCA_COMMON_MODULE_VERSION=<module version>
ATCACOMMON=$(EPICS_MODULES)/ATCACommon/$(ATCACOMMON_MODULE_VERSION)

1.2) configure/CONFIG_SITE
# ATCA COMMON API
COMMONATCA_PACKAGE_NAME=atca/commonATCA
COMMONATCA_VERSION=<package version>
COMMONATCA_TOP=$(PACKAGE_SITE_TOP)/$(COMMONATCA_PACKAGE_NAME)/$(COMMONATCA_VERSION)
COMMONATCA_LIB=$(COMMONATCA_TOP)/$(PKG_ARCH)/lib
COMMONATCA_INCLUDE=$(COMMONATCA_TOP)/$(PKG_ARCH)/include
 
1.3) src/Makefile
USR_INCLUDES += -I$(COMMONATCA_INCLUDE)
commonATCA_DIR = $(COMMONATCA_LIB)
USR_LIBS_Linux += commonATCA
<app>_DBD += ATCACommon.dbd
<app>_DBD += crossbarControl.dbd
<app>_LIBS += ATCACommon
 
1.4.a) Db/Makefile
You need to add the following db files

# ATCA common
DB_INSTALLS += $(ATCACOMMON)/db/crossbarCtrl.db
DB_INSTALLS += $(ATCACOMMON)/db/ATCACommon.db
DB_INSTALLS += $(ATCACOMMON)/db/Stream.db


1.5) st.cmd
# Don't use this before cpswLoadYamlFile()
# crossbarControlAsynDriverConfigure(Asyn port name, yaml path)
crossbarControlAsynDriverConfigure("crossbar", "mmio/AmcCarrierCore/AxiSy56040")
# Command to access common platform FPGA registers
# cpswATCACommonAsynDriverConfigure(Asyn port name, yaml path, named root (optional))
cpswATCACommonAsynDriverConfigure("atca", "mmio", "")

1.5a) Simple instantiation of scope (one configuration fits all channels of an AMC)

# Command to access common platform ATCA DAqMux waveforms. Use the command once per AMC card.
# scopeAsynDriverConfigure (
#    Asyn port name (must be different from previous one), 
#    scope index,
#    channel types (all channels will have this single type initial configuration),
#    An optional STRING number of samples. If not passed the default is used = 4096 @ 16-bit, 2048 @ 32-bit , 1024 @ 64-bit )

scopeAsynDriverConfigure("atca_str0", 0, "float64")
scopeAsynDriverConfigure("atca_str1", 1, "int16")

OR (not default number of samples used)

scopeAsynDriverConfigure("atca_str0", 0, "float64", "8192")
scopeAsynDriverConfigure("atca_str1", 1, "int16", "8192")

Note that the channel configuration can be modified dynamically later in runtime.

1.5b) Advanced instantiation of scope (individual initial configuration for each channel of an AMC)
 
# Command to access common platform ATCA DAqMux waveforms. Use the command once per AMC card.
# scopeAdvancedAsynDriverConfigure (
#    Asyn port name (must be different from previous one), 
#    scope index,
#    channel types,
#    An optional STRING number of samples. If not passed the default is used = 4096 @ 16-bit, 2048 @ 32-bit , 1024 @ 64-bit )

scopeAdvancedAsynDriverConfigure("atca_str0", 0, "int16", "int32", "int16", "float64")
scopeAdvancedAsynDriverConfigure("atca_str1", 1, "int16", "int16", "uint16", "float32")

OR (not default number of samples used)

scopeAdvancedAsynDriverConfigure("atca_str0", 0, "int16", "int32", "int16", "float64", "8192")
scopeAdvancedAsynDriverConfigure("atca_str1", 1, "int16", "int16", "uint16", "float32", "8192")

Note that the channel configuration can be modified dynamically later in runtime.

1.5c)

# ATCA common features

dbLoadRecords("db/ATCACommon.db", "DEV=${P},PORT=atca")
dbLoadRecords("db/crossbarCtrl.db", "DEV=$(P), PORT=crossbar")

Default number of elements is 4096 samples.
dbLoadRecords("db/Stream.db", "DEV=${P}:STR0, PORT=atca_str0, TSE=-2")
dbLoadRecords("db/Stream.db", "DEV=${P}:STR1, PORT=atca_str1, TSE=-2")

OR (not default number of samples used)

dbLoadRecords("db/Stream.db", "DEV=${P}:STR0, PORT=atca_str0, NELM=8192, TSE=-2")
dbLoadRecords("db/Stream.db", "DEV=${P}:STR1, PORT=atca_str1, NELM=8192, TSE=-2")


**************
* 2) Screens *
**************

Launch it through:
cd pydm
pydm -m "DEVICE=<record base name>" ATCACommon.ui &

example: pydm -m "DEVICE=EM1K0:GMD:HPS" ./ATCACommon.ui &

The main screen provides three buttons
1- Dual scope screen: allows the visualization and configuration of scope 0 and scope 1
2- JESD Diagnostics : opens some JESD diagnostics
3- Crossbar configuration : allows 4-input/4-output crossbar configuration

2.1) Dual scope screen
The dual scope screen allows the visualization of both scopes, 0 and 1 (AMC0 and AMC1 respectively). The following configrations are permitted
- Configure channel type and source dynamically
- Arm a single HW trigger or set it to automatic arming
- Enable cascading of trigger between Scope 0 and Scope 1. Note that the physical routing 
  from Scope 0 to Scope 1 and viceversa is already implemented. Meaning that enabling cascading
  in Scope 0 will enable using Scope 1 trigger for Scope 0 and viceversa.
- Enable averaging
- Enable downsampling

2.2) JESD diagnostics
Shows some few JESD configurations and status

2.3) Crossbar configuration
Allows the user to choose the routing of the following destinations: RTM_OUT0, FPGA, Back plane, RTM_OUT1. 
The sources are: RTM_IN0, FPGA, Back plane, RTM_IN1
